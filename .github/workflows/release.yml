name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  discussions: write
  packages: write

jobs:
  build:
    name: Build and Release Package
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: |
            pyproject.toml
            poetry.lock

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry build wheel twine

      - name: Build package
        run: |
          poetry version ${{ steps.get_version.outputs.VERSION }}
          poetry build

      - name: Check distribution
        run: |
          python -m twine check dist/*

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true
          files: |
            dist/*.tar.gz
            dist/*.whl

      # Temporarily commented out until PyPI tokens are available
      # - name: Publish to PyPI
      #   if: ${{ !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc') }}
      #   uses: pypa/gh-action-pypi-publish@v1.8.8
      #   with:
      #     password: ${{ secrets.PYPI_API_TOKEN }}
      #     skip_existing: true
      
      # - name: Publish to TestPyPI
      #   if: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      #   uses: pypa/gh-action-pypi-publish@v1.8.8
      #   with:
      #     password: ${{ secrets.TEST_PYPI_API_TOKEN }}
      #     repository_url: https://test.pypi.org/legacy/
      #     skip_existing: true
      
      - name: PyPI Publishing Reminder
        run: |
          echo "::warning::PyPI publishing is currently disabled. To enable it:"
          echo "::warning::1. Create API tokens for PyPI and TestPyPI"
          echo "::warning::2. Add secrets PYPI_API_TOKEN and TEST_PYPI_API_TOKEN to repository"
          echo "::warning::3. Uncomment the PyPI publish steps in the workflow file"

      - name: Create GitHub Discussion
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.discussions.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                category_id: 'DIC_kwDOABCD123456', // Replace with actual category ID
                title: 'Release v${{ steps.get_version.outputs.VERSION }}',
                body: 'A new version of DC API-X has been released! Check out the [release notes](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.get_version.outputs.VERSION }}) for details on what\'s new.'
              });
            } catch (error) {
              console.log('Note: Failed to create discussion. Ensure Discussions are enabled and the category ID is correct.');
            }

  docs:
    name: Build and Deploy Docs
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: |
            pyproject.toml
            poetry.lock

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --with dev --no-interaction
          poetry add --group dev mkdocs mkdocs-material

      - name: Build docs
        run: |
          poetry run mkdocs build

      - name: Deploy docs
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
