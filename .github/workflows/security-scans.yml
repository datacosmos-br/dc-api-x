name: Security Scans

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: "0 12 * * 3" # Run at noon on Wednesdays

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: read

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      security-events: write
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        language: ["python"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -e ".[dev]"

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  bandit:
    name: Bandit Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit bandit-sarif-formatter

      - name: Run Bandit scan
        id: bandit
        run: |
          mkdir -p reports
          bandit -r src/ -f sarif -o reports/bandit-results.sarif || echo "::warning::Bandit found security issues"
          
      - name: Upload Bandit scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.bandit.outcome != 'cancelled'
        with:
          sarif_file: reports/bandit-results.sarif
          category: bandit

  osv-scanner:
    name: OSV Vulnerability Scanner
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -e ".[dev]"

      - name: Run OSV Scanner
        id: osv
        continue-on-error: true
        uses: google/osv-scanner-action@v1
        with:
          scan-args: |-
            -r
            --json=reports/osv-results.json
            --skip-git
            ./
          
      - name: Process OSV results
        if: always() && steps.osv.outcome != 'cancelled'
        run: |
          if [ -f reports/osv-results.json ]; then
            echo "::group::OSV Scanner Results"
            cat reports/osv-results.json
            echo "::endgroup::"
            
            VULNS=$(jq '.results | map(.vulns) | flatten | length' reports/osv-results.json)
            if [ "$VULNS" -gt 0 ]; then
              echo "::warning::Found $VULNS vulnerabilities in dependencies"
            else
              echo "No vulnerabilities found in dependencies"
            fi
          fi

  pyre:
    name: Pyre Type Checker
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -e ".[dev]"
          pip install pyre-check

      - name: Run Pyre type check
        id: pyre
        continue-on-error: true
        run: |
          mkdir -p .pyre
          pyre --output=text --noninteractive check || echo "::warning::Pyre found type errors"
